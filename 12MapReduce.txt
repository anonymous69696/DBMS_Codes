Implement Map reduce operation with suitable examples using MongoDB. 
db.createCollection("orders") 
use orders 
db.orders.insertMany([{ _id: 1, cust_id: "AAAAA", price: 25, items: [ { sku: "oranges", qty: 5, price: 2.5 }, { sku: "apples", qty: 5, price: 2.5 } ]}, { _id: 2, cust_id: "AAAAA", price: 70, items: [ { sku: "oranges", qty: 8, price: 2.5 }, { sku: "chocolates", qty: 5, price: 10 } ]},{ _id: 3, cust_id: "BBBBB", price: 50, items: [ { sku: "oranges", qty: 10, price: 2.5 }, { sku: "pears", qty: 10, price: 2.5 } ]}, { _id: 4, cust_id: "BBBBB", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]}, { _id: 5, cust_id: "BBBBB", price: 50, items: [ { sku: "chocolates", qty: 5, price: 10 } ]}, { _id: 6, cust_id: "CCCCC", price: 35, items: [ { sku: "carrots", qty: 10, price: 
1.0 }, { sku: "apples", qty: 10, price: 2.5 } ]}, { _id: 8, cust_id: "DDDDD", price: 75, items: [ { sku: "chocolates", qty: 5, price: 10 }, { sku: "apples", qty: 10, price: 2.5 } ]},{ _id: 9, cust_id: "DDDDD", price: 55, items: [ { sku: "carrots", qty: 5, price: 1.0 }, { sku: "apples", qty: 10, price: 2.5 }, { sku: "oranges", qtyqty: 10, price: 2.5 } ]},{ _id: 7, cust_id: "CCCCC", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]},{ _id: 10, cust_id: "DDDDD", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]} ]) 
var mapFunction1 = function() {emit(this.cust_id, this.price);}; 
var reduceFunction1 = function(keyCustId, valuesPrices) {return Array.sum(valuesPrices);}; 
db.orders.mapReduce(mapFunction1,reduceFunction1,{ out: "map_reduce_example" }) 
db.map_reduce_example.find().sort( { _id: 1 } )
